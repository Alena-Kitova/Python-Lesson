import pytest
from string_utils import StringUtils

string_utils = StringUtils()


# –¢–µ—Å—Ç—ã –¥–ª—è capitalize()
@pytest.mark.positive
@pytest.mark.parametrize("input_str, expected", [
    ("sakura", "Sakura"),
    ("–°–∞–∫—É—Ä–∞", "–°–∞–∫—É—Ä–∞"),
    ("—Å–∞–∫—É—Ä–∞2025", "–°–∞–∫—É—Ä–∞2025"),
    ("—Å–∞–∫—É—Ä–∞", "–°–∞–∫—É—Ä–∞"),
    ("—Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏", "–¶–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏"),
    ("—Å–∞–∫—É—Ä–∞!", "–°–∞–∫—É—Ä–∞!")
])
def test_capitalize_positive(input_str, expected):
    assert string_utils.capitalize(input_str) == expected


@pytest.mark.negative
@pytest.mark.parametrize("input_str, expected", [
    ("123—Å–∞–∫—É—Ä–∞", "123—Å–∞–∫—É—Ä–∞"),
    ("", ""),
    (" ", " "),
    ("!@#$%", "!@#$%"),
    ("123 456", "123 456"),
    ("—Å–ê–ö–£–†–ê", "–°–∞–∫—É—Ä–∞"),
    ("–°–ê–ö–£–†–ê", "–°–∞–∫—É—Ä–∞"),
    ("—Å–∞–∫—É—Ä–∞üå∏", "–°–∞–∫—É—Ä–∞üå∏")
])
def test_capitalize_negative(input_str, expected):
    assert string_utils.capitalize(input_str) == expected


# –¢–µ—Å—Ç—ã –¥–ª—è trim()
@pytest.mark.positive
@pytest.mark.parametrize("input_str, expected", [
    (" sakura", "sakura"),
    ("  —Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏", "—Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏"),
    ("   —Å–∞–∫—É—Ä–∞  ", "—Å–∞–∫—É—Ä–∞  "),
    ("  123", "123"),
    (" !–°–∞–∫—É—Ä–∞!", "!–°–∞–∫—É—Ä–∞"),
    (" —Å–∞–∫—É—Ä–∞2025", "—Å–∞–∫—É—Ä–∞2025")
])
def test_trim_positive(input_str, expected):
    assert string_utils.trim(input_str) == expected


@pytest.mark.negative
@pytest.mark.parametrize("input_str, expected", [
    ("", ""),
    ("   ", ""),
    ("—Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏", "—Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏"),
    ("—Å–∞–∫ —É—Ä–∞", "—Å–∞–∫ —É—Ä–∞"),
    ("—Å–∞–∫—É—Ä–∞", "—Å–∞–∫—É—Ä–∞"),
    ("sakura", "sakura"),
    ("\t\tspaces", "\t\tspaces"),  # –¢–∞–±—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
    ("\nnewline", "\nnewline")    # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
])
def test_trim_negative(input_str, expected):
    assert string_utils.trim(input_str) == expected


# –¢–µ—Å—Ç—ã –¥–ª—è contains()
@pytest.mark.positive
@pytest.mark.parametrize("input_str, symbol, expected", [
    ("SkyPro", "S", True),
    ("–°–∞–∫—É—Ä–∞", "—É", True),
    ("12345", "5", True),
    ("!@#$%", "#", True),
    ("aaaaaa", "a", True),
])
def test_contains_positive(input_str, symbol, expected):
    assert string_utils.contains(input_str, symbol) == expected


@pytest.mark.negative
@pytest.mark.parametrize("input_str, symbol, expected", [
    ("SkyPro", "U", False),
    ("", "a", False),
    ("—Å–∞–∫—É—Ä–∞", "", False),
    ("—Å–∞–∫—É—Ä–∞", "–©", False),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    ("123", "4", False)
])
def test_contains_negative(input_str, symbol, expected):
    assert string_utils.contains(input_str, symbol) == expected


# –¢–µ—Å—Ç—ã –¥–ª—è delete_symbol()
@pytest.mark.positive
@pytest.mark.parametrize("input_str, symbol, expected", [
    ("SkyPro", "k", "SyPro"),
    ("–°–∞–∫—É—Ä–∞", "—É", "–°–∞–∫—Ä–∞"),
    ("123123", "1", "2323"),
    ("—Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–∏—à–Ω–∏", " ", "—Ü–≤–µ—Ç–µ–Ω–∏–µ–≤–∏—à–Ω–∏"),
    ("@#$%", "$", "@#%")
])
def test_delete_symbol_positive(input_str, symbol, expected):
    assert string_utils.delete_symbol(input_str, symbol) == expected


@pytest.mark.negative
@pytest.mark.parametrize("input_str, symbol, expected", [
    ("", "a", ""),
    ("—Å–∞–∫—É—Ä–∞", "", "—Å–∞–∫—É—Ä–∞"),
    ("sakura", "x", "sakura"),
    ("aaaa", "a", ""),
    ("12345", "6", "12345")
])
def test_delete_symbol_negative(input_str, symbol, expected):
    assert string_utils.delete_symbol(input_str, symbol) == expected
